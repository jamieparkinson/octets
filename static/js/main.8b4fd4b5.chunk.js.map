{"version":3,"sources":["PrettyInput.js","App.js","serviceWorker.js","index.js"],"names":["StyledInput","styled","input","_templateObject","_ref","value","StyledLabel","label","_templateObject2","InputWrapper","div","_templateObject3","PrettyInput","_ref2","_ref2$onChange","onChange","Function","prototype","_ref2$placeholder","placeholder","_ref2$label","react_default","a","createElement","e","target","type","AppWrapper","App_templateObject","ContentBox","App_templateObject2","Title","h4","App_templateObject3","createValueParser","setValue","radix","x","v","Math","min","parseInt","isNaN","formatValue","length","str","toString","padStart","App","_useState","useState","_useState2","Object","slicedToArray","src_PrettyInput","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","FullscreenStyle","createGlobalStyle","src_templateObject","styledApp","Fragment","src_App","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerSW"],"mappings":"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","file":"static/js/main.8b4fd4b5.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledInput = styled.input`\n  flex: 1 0 auto;\n  height: 40px;\n  outline: 0;\n  text-align: left;\n  padding: 10px;\n  border-radius: 2px;\n  background: white;\n  border: 1px solid rgb(220, 220, 220);\n  font-size: 18px;\n  color: ${({ value }) => value ? 'rgb(30, 30, 30)' : 'rgb(220, 220, 220)'};\n  \n  &:focus {\n    color: rgb(30, 30, 30);\n  }\n`;\n\nconst StyledLabel = styled.label`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgb(245, 245, 245);\n  font-weight: bold;\n  color: rgb(120, 120, 120);\n  font-size: 13px;\n  width: 40px;\n  height: 40px;\n  border-radius: 2px;\n  border: 1px solid rgb(220, 220, 220);\n  margin: 0 10px 0 0 ;\n`;\n\nconst InputWrapper = styled.div`\n  margin: 10px 0;\n  display: flex;\n  width: 100%;\n`;\n\nconst PrettyInput = ({ value, onChange = Function.prototype, placeholder = \"\", label = \"\" }) => (\n  <InputWrapper>\n    <StyledLabel>{label}</StyledLabel>\n    <StyledInput\n      value={value}\n      onChange={(e) => onChange(e.target.value)}\n      placeholder={placeholder}\n      type=\"text\"\n    />\n  </InputWrapper>\n);\n\nexport default PrettyInput;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport PrettyInput from \"./PrettyInput\";\n\nconst AppWrapper = styled.div`\n  display: flex;\n  height: 100%;\n  align-items: center;\n  justify-content: center;\n  background-color: rgb(250, 250, 250);\n`;\n\nconst ContentBox = styled.div`\n  border: 1px solid rgb(220, 220, 220);\n  border-radius: 5px;\n  padding: 20px;\n  box-shadow: 0 0 4px rgba(0,0,0,0.1);\n  background-color: white;\n  width: 50%;\n  max-width: 400px;\n  min-width: 310px;\n`;\n\nconst Title = styled.h4`\n  text-align: center;\n  display: block;\n  font-size: 20px;\n  margin: 0 0 20px 0;\n  color: rgb(30, 30, 30);\n`;\n\nconst createValueParser = (setValue, radix) => {\n  return x => {\n    const v = Math.min(parseInt(x, radix), 0xFF);\n    return setValue(isNaN(v) ? '' : v);\n  }\n};\n\nconst formatValue = (value, radix, length) => {\n  const str = value.toString(radix);\n  if (str !== '') {\n    return str.padStart(length, '0');\n  }\n  return '';\n};\n\nconst App = () => {\n  const [ value, setValue ] = useState('');\n  return (\n    <AppWrapper>\n      <ContentBox>\n        <Title>Octet format converter</Title>\n        <PrettyInput\n          label=\"BIN\"\n          value={formatValue(value, 2, 8)}\n          onChange={createValueParser(setValue, 2)}\n          placeholder=\"Binary\"\n        />\n        <PrettyInput\n          label=\"HEX\"\n          value={formatValue(value, 16, 2)}\n          onChange={createValueParser(setValue, 16)}\n          placeholder=\"Hexadecimal\"\n        />\n        <PrettyInput\n          label=\"DEC\"\n          value={formatValue(value, 10, 2)}\n          onChange={createValueParser(setValue, 10)}\n          placeholder=\"Decimal\"\n        />\n      </ContentBox>\n    </AppWrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createGlobalStyle } from \"styled-components\";\nimport App from \"./App\";\nimport { register as registerSW } from \"./serviceWorker\";\n\nimport \"typeface-lato\";\n\nconst FullscreenStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n  }\n  \n  html, body, body > div {\n    height: 100%;\n    width: 100%;\n    margin: 0;\n    font-family: 'Lato', sans-serif;\n  }\n`;\n\nconst styledApp = (\n  <>\n    <FullscreenStyle/>\n    <App />\n  </>\n);\n\n\nReactDOM.render(styledApp, document.getElementById('root'));\nregisterSW();\n"],"sourceRoot":""}